# This file contains common pin mappings for the BIGTREETECH Manta M8P V2.0
# To use this config, the firmware should be compiled for the
# STM32H723 with a "128KiB bootloader" "25 MHz crystal"
# and "USB (on PA11/PA12)", "CAN bus (on PD0/PD1)" or Serial (on USART1 PA10/PA9).

# See docs/Config_Reference.md for a description of parameters.

# Motor1
[stepper_x]
step_pin: PE6
dir_pin: PE5
enable_pin: !PC14
microsteps: 16
rotation_distance: 40.0869
endstop_pin: ^!PF4
position_endstop: 0
position_max: 194
position_min: 0
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC13
#diag_pin: PF4 
run_current: 0.800
stealthchop_threshold: 999999

# Motor2
[stepper_y]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
endstop_pin: ^PF3
position_endstop: 0
position_max: 240
position_min: 0
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PE3
#diag_pin: PF3
run_current: 0.800
stealthchop_threshold: 999999

# Motor3
[stepper_z]
step_pin: PB8
dir_pin: !PB7
enable_pin: !PE0
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0
position_max: 200
position_min: -2.0
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PB9
#diag_pin: PF2
run_current: 0.6
stealthchop_threshold: 999999


# Motor5
[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PB6
microsteps: 16
rotation_distance: 8.002
nozzle_diameter: 0.4
filament_diameter: 1.75
heater_pin: PA0 # HE0
sensor_pin: PB0 # T0
sensor_type: ATC Semitec 104GT-2
control: pid
pid_Kp=28.491 
pid_Ki=1.376
pid_Kd=147.441
min_temp: 0
max_temp: 250

[tmc2209 extruder]
uart_pin: PB5
run_current: 0.800
stealthchop_threshold: 999999  


[heater_fan extruder]
pin: PF7
max_power: 1.0
fan_speed: 1
kick_start_time: 0
heater: extruder
heater_temp: 50.0

[fan]
pin: PF9
#heater_temp: 50.0
#heater: extruder
max_power: 1.0
shutdown_speed: 0.0


[heater_bed]
heater_pin: PF5
max_power: 1.0
sensor_pin: PB1 # TB 
sensor_type: Generic 3950
control: pid
pid_Kp=73.401 
pid_Ki=2.589 
pid_Kd=520.228
min_temp: 0
max_temp: 130


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_210029000251313433343333-if00
[virtual_sdcard]
path: ~/printer_data/gcodes                      

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100
 
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE7, EXP1_2=PG1,
    EXP1_3=PG0, EXP1_4=PF15,
    EXP1_5=PF14, EXP1_6=PF13,    # Slot in the socket on this side
    EXP1_7=PF12, EXP1_8=PF11,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PE13, EXP2_2=PE12,
    EXP2_3=PE15, EXP2_4=PE11,
    EXP2_5=PE10, EXP2_6=PE14,      # Slot in the socket on this side
    EXP2_7=PE8, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

#[adxl345]
#cs_pin: PA15
#spi_bus: spi3a

[bltouch]
#set_output_mode: 5V
sensor_pin: ^PD13 # this is unique to your mainboard
control_pin: PD12  #this is unique to your mainboard
x_offset: 0         #this needs to be calibrated
y_offset: -37
samples: 2
speed: 2
z_offset: 1.840
probe_with_touch_mode: true
#pin_up_touch_mode_reports_triggered: False

[safe_z_home]
home_xy_position: 100,100 #this should be the center of your bed
speed: 50 
z_hop: 10
z_hop_speed: 5

[bed_mesh]
speed: 80
horizontal_move_z: 5
mesh_min: 10, 10      #!!min and max co-ords are based on the probes location not the nozzle!!
mesh_max: 190, 200  #needs to be calibrated for your individual printer
probe_count: 5,5 #this is the number of probing points on X then Y axis
mesh_pps: 2,2
fade_start: 1
fade_end: 10
fade_target: 0
adaptive_margin: 5

[screws_tilt_adjust]
screw1: 12, 42
screw1_name: front left screw
screw2: 194, 42
screw2_name: front right screw
screw3: 194, 240 
screw3_name: rear right screw 
screw4: 12, 240
screw4_name: rear left screw
horizontal_move_z: 10
speed: 50
screw_thread: CCW-M4 #measure the diameter of your adjustment screw

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD="default"
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Wait for bed to reach temperature
    #M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    #M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    #M106 S0
    M107
    # Move nozzle away from print while retracting
    G91 
    G1 Z10 F3000  # Raise nozzle by 10mm 
    G90
    G1 X0 F6000
    G1 Y240 F6000
    # Disable steppers
    M84
    BED_MESH_CLEAR

[filament_switch_sensor Runout Sensory]
pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
runout_gcode: 
    G1 Z10 F3000  # Raise nozzle by 10mm 
    G90
    G1 X0 F6000
    G1 Y240 F6000
    
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
switch_pin: !PF10
#   The pin on which the switch is connected. This parameter must be
#   provided.

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro before_layer_change]
description: Add this to the "before layer change" input box in the slicer.
  Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode:
  {% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
  {% set layer = params.LAYER|default(-1)|int + 1 %}
  {% if height >= 0.0 and layer >= 0 %}
    SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
    SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
    {% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
      SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
        height}"
    {% endif %}
  {% endif %}

[gcode_macro after_layer_change]
description: Add this to the "after layer change" input box in the slicer.
  Usage: AFTER_LAYER_CHANGE
gcode:
  _KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description: Schedules the specified g-code command to be run at the specified
  layer. LAYER=next will cause the command to run at the next layer change. 
  Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode> 
                        [CANCEL=<0|1>]
gcode:
  {% set tot_layers = printer.print_stats.info.total_layer %}
  {% if params|length > 0 %}
    _KM_CHECK_IS_PRINTING

    {% set CANCEL = params.CANCEL|default(0)|int != 0 %}
    {% set COMMAND = params.COMMAND|default(None) %}
    {% if COMMAND %} # This makes it easier to match commands for cancellation.
      {% set COMMAND = COMMAND.lstrip().split(None, 1) %}
      {% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
    {% endif %}

    {% if "LAYER" in params %}
      {% set cmd_container = "commands_layer" %}
      {% set cur_layer = printer.print_stats.info.current_layer|int %}
      {% if "HEIGHT" in params %}
        {action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
      {% elif params.LAYER|string|lower == "next" %}
        {% set LAYER = cur_layer + 1 %}
      {% else %}
        {% set LAYER = params.LAYER|int %}
      {% endif %}
      {% if LAYER <= cur_layer %}
        {action_raise_error("LAYER[%i] must be above current print layer[%i]."
                            | format(LAYER, cur_layer))}
      {% elif tot_layers and LAYER > tot_layers %}
        {action_raise_error("LAYER[%i] must not be above top layer[%i]."
                            | format(LAYER, tot_layers))}
      {% endif %}
      {% set key = LAYER %}

    {% elif "HEIGHT" in params %}
      {% set cmd_container = "commands_height" %}
      {% set HEIGHT = params.HEIGHT|float %}
      {% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
      {% if HEIGHT <= cur_height %}
        {action_raise_error(
          "HEIGHT[%.3f] must be above current print height[%.3f].")
          | format(HEIGHT, cur_height)}
      {% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
        {action_raise_error(
          "HEIGHT[%.3f] must be below maximum Z height[%.3f].")
          | format(HEIGHT, printer.toolhead.axis_maximum.z)}
      {% endif %}
      {% set key = HEIGHT %}

    {% else %}
      {action_raise_error("No HEIGHT or LAYER argument provided.")}
    {% endif %}
  
    {% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
    {% if key not in commands and not CANCEL %}
      {% set dummy = commands.__setitem__(key, []) %}
    {% endif %}

    {% if CANCEL %}
      {% if key in commands %}
        {% set pos = ("%i"|format(key)) if key is integer else
                      ("%.3fmm"|format(key)) %}
        {% if COMMAND %}
          {% set dummy = commands[key].remove(COMMAND) %}
          {% if commands[key]|length == 0 %}
            {% set dummy = commands.__delitem__(key) %}
          {% endif %}
          {action_respond_info("Cancelled %s %s:\n* %s" |
                               format("layer" if k is integer else "height",
                                      pos, COMMAND))}
        {% else %}
          {% set dummy = commands.__delitem__(key) %}
          {action_respond_info("Cancelled all commands at %s %s." |
                               format("layer" if k is integer else "height",
                                      pos))}
        {% endif %}
      {% endif %}
    {% elif not COMMAND %}
      {action_raise_error("No COMMAND argument provided.")}
    {% elif COMMAND in commands[key] %}
      {action_raise_error("Duplicate command previously scheduled.")}
    {% else %}
      {% set dummy = commands[key].append(COMMAND) %}
      {% set pos = ("%i"|format(key)) if key is integer else
                   ("%.3fmm"|format(key)) %}
      {action_respond_info("%s %s:\n* %s" |
                           format("layer" if key is integer else "height",
                                  pos, COMMAND))}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
        commands|replace('\"','\\\"')}"
    _UPDATE_LAYER_COMPAT

  # No arguments means just list all the triggers.
  {% else %}
    {% set output = [] %}
    {% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
    {% for key in commands|list|sort %}
      {% set dummy = output.append("layer %i:" | format(key)) %}
      {% for c in commands[key] %}
        {% set dummy = output.append("* %s" | format(c)) %}
      {% endfor %}
    {% endfor %}
    {% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
    {% for key in commands|list|sort %}
      {% set dummy = output.append("height %.3fmm:" | format(key)) %}
      {% for c in commands[key] %}
        {% set dummy = output.append("* %s" | format(c)) %}
      {% endfor %}
    {% endfor %}
    {action_respond_info(output|join('\n'))}
  {% endif %}

[gcode_macro _km_layer_run]
description: Runs pending commands for the current layer change.
  Usage: _KM_LAYER_RUN
variable_cur_height: 0.0
variable_clearance_z: 0.0
variable_commands_layer: {}
variable_commands_height: {}
gcode:
  {% set cur_layer = printer.print_stats.info.current_layer %}
  {% for key in commands_layer | select("<=", cur_layer) | sort %}
    {action_respond_info("Executing scheduled commands at layer %d:\n%s" |
        format(key, commands_layer[key]|join('\n')))}
    {% for c in commands_layer[key] %}
      {c}
    {% endfor %}
    {% set dummy = commands_layer.__delitem__(key) %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
      commands_layer|replace('\"','\\\"')}"
  {% for key in commands_height | select("<=", cur_height) | sort %}
    {action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
        format(key, commands_height[key]|join('\n')))}
    {% for c in commands_height[key] %}
      {c}
    {% endfor %}
    {% set dummy = commands_height.__delitem__(key) %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
      commands_height|replace('\"','\\\"')}"
  _UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description: Clears scheduled gcode commands and state for all layers.
  Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode:
  SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
  _UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description: Clears scheduled gcode commands and state for all layers.
  Usage: _RESET_LAYER_GCODE
gcode:
  SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
  _UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description: Clears all scheduled gcode commands.
  Usage: CANCEL_ALL_LAYER_GCODE
gcode:
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
  SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
  _UPDATE_LAYER_COMPAT

#
# Begin Mainsail/Fluidd compat
#

[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  _KM_CHECK_IS_PRINTING
  {% set pause_next_layer =
           printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
    { 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
  GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
              }" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  _KM_CHECK_IS_PRINTING
  {% set pause_at_layer =
           printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  # This enable logic is copied directly from Fluidd/Mainsail.
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
                  params.LAYER is defined %}
  {% set LAYER = params.LAYER |
                 default((pause_at_layer.layer|int,
                          printer.print_stats.info.current_layer|int + 1)|max)%}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}

  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
    { 'enable': False, 'layer': 0, 'call': MACRO }}"
  {% if ENABLE and pause_at_layer.enable %}
    # Remove the previously scheduled command if we're replacing it.
    GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
                }" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
  {% endif %}
  # Add the new command.
  GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
              }" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: _KM_SET_PRINT_STATS_INFO
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  _KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _update_layer_compat]
gcode:
  {% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
  {% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
  {% set keys = commands_layer | sort(reverse=True) %}

  {% set pause_next_layer = {'enable': False, 'call':
           printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
  {% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
    {% set dummy = pause_next_layer.__setitem__('enable', True) %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
    pause_next_layer|replace('\"','\\\"') }"

  # Don't just make pause_at_layer a copy of pause_next_layer.
  {% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
           printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
  {% if pause_next_layer.enable and
          pause_next_layer.call == pause_at_layer.call %}
    {% set keys = keys | reject("==", next_layer) %}
  {% endif %}

  # We iterate through the entire reverse sorted key list because Jinja2 doesn't
  # have a filter for dict values. It's ugly, but there should be only a few
  # items in the dict.
  {% for key in keys %}
    {% if pause_at_layer.call in commands_layer[key] %}
      {% set dummy = pause_at_layer.__setitem__('enable', True) %}
      {% set dummy = pause_at_layer.__setitem__('layer', key) %}
    {% endif %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
    pause_at_layer|replace('\"','\\\"') }"

#
# End Mainsail/Fluidd compat
#

[gcode_macro pause_next_layer]
description: Convenience macro to schedule the current print to pause at the
  next layer change. See PAUSE for additional arguments.
  Usage: PAUSE_NEXT_LAYER ...
gcode:
  _CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
    }{% endfor %}
  GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
    ' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description: Convenience macro to schedule the current print to pause at the
  specified layer change. LAYER=next will cause the command to run at the next
  layer change. See PAUSE for additional arguments.
  Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode:
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LAYER|default(layer number)|float %}
  {% set dummy = params.HEIGHT|default(Z height)|int %}
  " %} # End argument block for Mainsail
  {% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
  _CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
   }{% endfor %}
  GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
      ' ' ~ k ~ '=' ~ params[k] }{% endfor
    %} COMMAND="PAUSE{% for k in filtered_params %}{
      ' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description: Convenience macro to schedule a feedrate adjustment at the
  specified layer change. LAYER=next will cause the command to run at the next
  layer change. (SPEED parameter behaves the same as the M220 S parameter.)
  Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode:
  {% set SPEED = params.SPEED|default(0)|int %}
  {% if SPEED < 1 or SPEED > 500 %}
    {action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
                        % SPEED)}
  {% endif %}
  GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
      ' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LAYER|default(layer number)|float %}
  {% set dummy = params.HEIGHT|default(Z height)|int %}
  {% set dummy = params.SPEED|default(percentage)|int %}
  " %} # End argument block for Mainsail

[gcode_macro flow_at_layer]
description: Convenience macro to schedule a flow percentage adjustment at the
  specified layer change. LAYER=next will cause the command to run at the next
  layer change. (FLOW parameter behaves the same as the M221 S parameter.)
  Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode:
  {% set FLOW = params.FLOW|default(0)|int %}
  {% if FLOW < 1 or FLOW > 500 %}
    {action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
                        % FLOW)}
  {% endif %}
  GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
      ' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LAYER|default(layer number)|float %}
  {% set dummy = params.HEIGHT|default(Z height)|int %}
  {% set dummy = params.FLOW|default(percentage)|int %}
  " %} # End argument block for Mainsail

[gcode_macro fan_at_layer]
description: Convenience macro to schedule a fan adjustment at the specified
  layer change. LAYER=next will cause the command to run at the next layer
  change. See SET_FAN_SCALING for additional arguments.
  Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode:
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LAYER|default(layer number)|float %}
  {% set dummy = params.HEIGHT|default(Z height)|int %}
  {% set dummy = params.SCALE|default(1.0)|float %}
  {% set dummy = params.BUMP|default(0)|int %}
  {% set dummy = params.MAXIMUM|default(0)|int %}
  {% set dummy = params.MINIMUM|default(255)|int %}
  {% set dummy = params.SPEED|default(current speed)|int %}
  " %} # End argument block for Mainsail
  {% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
  {% if filtered_params|length == 0 %}
    {action_raise_error("No fan parameters provided.")}
  {% endif %}
  _CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
    }{% endfor %}
  GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
      ' ' ~ k ~ '=' ~ params[k] }{% endfor
    %} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
      ' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description: Convenience macro to schedule a heater adjustment at the specified
  layer change. LAYER=next will cause the command to run at the next layer
  change. See SET_HEATER_SCALING for additional arguments.
  Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode:
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LAYER|default(layer number)|float %}
  {% set dummy = params.HEIGHT|default(Z height)|int %}
  {% set dummy = params.HEATER|default(e.g. extruder) %}
  {% set dummy = params.SCALE|default(1.0)|float %}
  {% set dummy = params.BUMP|default(0.0)|float %}
  {% set dummy = params.MAXIMUM|default(max_temp)|float %}
  {% set dummy = params.MINIMUM|default(min_temp)|float %}
  {% set dummy = params.TARGET|default(current target)|float %}
  " %} # End argument block for Mainsail
  {% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
  _CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
    }{% endfor %}
  GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
      ' ' ~ k ~ '=' ~ params[k] }{% endfor
    %} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
      ' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
                                   |replace('\"','\\\"') ~ '\\\"'
    }{% endfor %}"




#[output_pin ps_on_pin]
#pin: PD14

#[neopixel my_neopixel_1]
#pin: PD15

#[hall_filament_width_sensor]
#adc1: PC0
#adc2: PF10
