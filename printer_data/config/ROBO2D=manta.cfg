# This file contains common pin mappings for the BIGTREETECH Manta M8P V2.0
# To use this config, the firmware should be compiled for the
# STM32H723 with a "128KiB bootloader" "25 MHz crystal"
# and "USB (on PA11/PA12)", "CAN bus (on PD0/PD1)" or Serial (on USART1 PA10/PA9).

# See docs/Config_Reference.md for a description of parameters.

# Motor1
[stepper_x]
step_pin: PE6
dir_pin: PE5
enable_pin: !PC14
microsteps: 16
rotation_distance: 40.0869
endstop_pin: ^!PF4
position_endstop: 0
position_max: 194
position_min: 0
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC13
#diag_pin: PF4 
run_current: 0.800
stealthchop_threshold: 999999

# Motor2
[stepper_y]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
endstop_pin: ^PF3
position_endstop: 0
position_max: 240
position_min: 0
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PE3
#diag_pin: PF3
run_current: 0.800
stealthchop_threshold: 999999

# Motor3
[stepper_z]
step_pin: PB8
dir_pin: !PB7
enable_pin: !PE0
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0
position_max: 200
position_min: -2.0
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PB9
#diag_pin: PF2
run_current: 0.6
stealthchop_threshold: 999999


# Motor5
[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PB6
microsteps: 16
rotation_distance: 8.002
nozzle_diameter: 0.4
filament_diameter: 1.75
heater_pin: PA0 # HE0
sensor_pin: PB0 # T0
sensor_type: ATC Semitec 104GT-2
control: pid
pid_Kp=28.491 
pid_Ki=1.376
pid_Kd=147.441
min_temp: 0
max_temp: 250

[tmc2209 extruder]
uart_pin: PB5
run_current: 0.800
stealthchop_threshold: 999999  


[heater_fan extruder]
pin: PF7
max_power: 1.0
fan_speed: 1
kick_start_time: 0
heater: extruder
heater_temp: 50.0

[fan]
pin: PF9
#heater_temp: 50.0
#heater: extruder
max_power: 1.0
shutdown_speed: 0.0


[heater_bed]
heater_pin: PF5
max_power: 1.0
sensor_pin: PB1 # TB 
sensor_type: Generic 3950
control: pid
pid_Kp=73.401 
pid_Ki=2.589 
pid_Kd=520.228
min_temp: 0
max_temp: 130


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_210029000251313433343333-if00
[virtual_sdcard]
path: ~/printer_data/gcodes                      

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100
 
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE7, EXP1_2=PG1,
    EXP1_3=PG0, EXP1_4=PF15,
    EXP1_5=PF14, EXP1_6=PF13,    # Slot in the socket on this side
    EXP1_7=PF12, EXP1_8=PF11,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PE13, EXP2_2=PE12,
    EXP2_3=PE15, EXP2_4=PE11,
    EXP2_5=PE10, EXP2_6=PE14,      # Slot in the socket on this side
    EXP2_7=PE8, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

#[adxl345]
#cs_pin: PA15
#spi_bus: spi3a

[bltouch]
#set_output_mode: 5V
sensor_pin: ^PD13 # this is unique to your mainboard
control_pin: PD12  #this is unique to your mainboard
x_offset: 0         #this needs to be calibrated
y_offset: -37
samples: 2
speed: 2
z_offset: 1.840
probe_with_touch_mode: true
#pin_up_touch_mode_reports_triggered: False

[safe_z_home]
home_xy_position: 100,100 #this should be the center of your bed
speed: 50 
z_hop: 10
z_hop_speed: 5

[bed_mesh]
speed: 80
horizontal_move_z: 5
mesh_min: 10, 10      #!!min and max co-ords are based on the probes location not the nozzle!!
mesh_max: 190, 200  #needs to be calibrated for your individual printer
probe_count: 5,5 #this is the number of probing points on X then Y axis
mesh_pps: 2,2
fade_start: 1
fade_end: 10
fade_target: 0
adaptive_margin: 5

[screws_tilt_adjust]
screw1: 12, 42
screw1_name: front left screw
screw2: 194, 42
screw2_name: front right screw
screw3: 194, 240 
screw3_name: rear right screw 
screw4: 12, 240
screw4_name: rear left screw
horizontal_move_z: 10
speed: 50
screw_thread: CCW-M4 #measure the diameter of your adjustment screw

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD="default"
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Wait for bed to reach temperature
    #M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    #M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    #M106 S0
    M107
    # Move nozzle away from print while retracting
    G91 
    G1 Z10 F3000  # Raise nozzle by 10mm 
    G90
    G1 X0 F6000
    G1 Y240 F6000
    # Disable steppers
    M84
    BED_MESH_CLEAR

[filament_switch_sensor Runout Sensory]
pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
runout_gcode: 
    G1 Z10 F3000  # Raise nozzle by 10mm 
    G90
    G1 X0 F6000
    G1 Y240 F6000
    
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
switch_pin: !PF10
#   The pin on which the switch is connected. This parameter must be
#   provided.

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro set_draw_params]
description: Sets the default parameters used by DRAW_LINE_TO.
  Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height: 0.2
variable_width: 0.0 # Set to nozzle_diameter at startup
variable_feedrate: 1200
gcode:
  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% for k in params %}
    {% set kl = k|lower %}
    {% if kl in dparams %}
      {% if dparams[kl] is float %}
        {% set v = params[k]|float %}
      {% elif dparams[kl] is integer %}
        {% set v = params[k]|int %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
    {% endif %}
  {% endfor %}

[gcode_macro draw_line_to]
description: Extrudes a line of filament at the specified height and width from
  the current coordinate to the supplied XY coordinate. (The height is used only
  to calculate the extrusion volume.)
  Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
                      [FEEDRATE=<mm/m>]
gcode:
  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set position = printer.gcode_move.gcode_position %}
  {% set X = params.X|default(position.x)|float %}
  {% set Y = params.Y|default(position.y)|float %}
  {% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
  {% set WIDTH = params.WIDTH|default(dparams.width)|float %}
  {% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}

  {% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}

  {% set filament_area = 3.14159 *
       (printer.configfile.settings[
          printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
  {% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}

  # Use the base state call here so offset adjustments get persisted.
  _KM_SAVE_GCODE_STATE NAME=_KM_PURGE
  G90
  G92 E0.0
  G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
  _KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description: Purges the specified length of filament as a line (or rows of
  lines) in front of the supplied print area. If no print area is specified the
  purge lines are drawn at the front edge of the maximum printable area. If no
  printable area is set it defaults to the XY axis limits.
  Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
                         [WIDTH=<mm>] [LENGTH=<mm>]
gcode:
  # TODO: Make this work for delta printers.
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set origin = printer.gcode_move.homing_origin %}
  {% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
                                              km.print_min[1] - origin.y)) %}
  {% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
                                              km.print_max[1] - origin.y)) %}

  {% if "PRINT_MIN" in params %}
    {% set PRINT_MIN = (
        (params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
        (params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
      ) %}
  {% else %}
    {% set PRINT_MIN = km.print_min %}
  {% endif %}
  {% if "PRINT_MAX" in params %}
    {% set PRINT_MAX = (
        (params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
        (params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
      ) %}
  {% else %}
    {% set PRINT_MAX = km.print_max %}
  {% endif %}
  {% set extruder = printer.toolhead.extruder|string %}
  {% set HEIGHT = params.HEIGHT|default(
    printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
  {% set WIDTH = params.WIDTH|default(
    printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
  {% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}

  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set filament_area = 3.14159 *
       (printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
  {% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
  {% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
  {% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
  {% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
  {% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
  {% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
  # This will purge into the print area when the bed is filled to the front.
  {% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
                                       (purge_rows + 0.5) * WIDTH )|max %}
  G90
  # Jog to the front left corner to get strings out of the print area.
  G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
    "%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
  # Move to the starting corner.
  G1 X{"%.3f" % (PRINT_MIN[0] - km.start_purge_prime_length / WIDTH,
                 km.print_min[0])|max} Y{"%.3f" % y_start} Z{
    "%.4f" % HEIGHT} F{km.travel_speed_xy}
  # Prime the extruder before beginning the purge lines.
  G92 E0.0
  # Move slowly during priming to prevent excessive blobbing
  G1 X{"%.3f" % PRINT_MIN[0]} E{"%.3f" % km.start_purge_prime_length
   } F{km.load_priming_speed}
  G92 E0.0
  # Purge.
  {% for n in range(purge_rows - 1) %}
    {% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
    DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
      WIDTH * n + y_start}"
    DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
      WIDTH * (n + 1) + y_start}"
  {% endfor %}
  {% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
  DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
    WIDTH * (purge_rows - 1) + y_start}"
  G92 E0.0

[pwm_cycle_time BEEPER_pin]
pin: ar37
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

